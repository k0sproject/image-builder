name: Build
on:
  push:
    branches:
      - main
    paths:
      - images/**
      - .github/workflows/build.yml
  pull_request:
    paths:
      - images/**
      - .github/workflows/build.yml
jobs:
  prepare:
    name: Generate matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    steps:
      - name: Generate build matrix
        id: gen-matrix
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euxo pipefail
          gh api -X GET "repos/$GITHUB_REPOSITORY/compare/${GITHUB_BASE_REF:-$GITHUB_SHA^1}...$GITHUB_SHA" \
            -F page=1 -F per_page=1 \
            --jq '
              (.files | map({status: .status, path: .filename | split("/")})) as $files
                | $files # select image folders that were touched in the changeset
                    | map(.path)
                    | map(select(length > 2 and .[0] == "images"))
                    | map(.[1:3] | join("/"))
                    | unique
                    as $touched_images
                | $files # select images that have been removed in the changeset
                    | map(select(.status == "removed") | .path)
                    | map(select(.[0] == "images" and .[3] == "Dockerfile"))
                    | map(.[1:3] | join("/"))
                    as $removed_images
                | $touched_images - $removed_images
                | if length > 0 then {folder: .} else {skip: 1} end # hack to skip an empty matrix (GitHub will fail on empty matrix builds)
                | "matrix=\(tojson)"
            ' | { set +x && tee -- "$GITHUB_OUTPUT"; }

  images:
    runs-on: ubuntu-22.04
    needs: [prepare]
    if: needs.prepare.outputs.matrix != '{"skip":1}'
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Determine image parameters
        id: image
        env:
          FOLDER: ${{ matrix.folder }}
        run: |
          set -euo pipefail

          registry=ttl.sh
          name="$GITHUB_REPOSITORY_OWNER-${FOLDER%%/*}-$GITHUB_RUN_ID-$GITHUB_RUN_ATTEMPT"
          tag=1d
          platforms=linux/amd64,linux/arm64,linux/arm/v7

          if [ "$GITHUB_REPOSITORY_OWNER" = k0sproject ] && [ "$GITHUB_REF" = refs/heads/main ]; then
            registry=quay.io
            name="$GITHUB_REPOSITORY_OWNER/${FOLDER%%/*}"
            tag="${FOLDER#*/}"
          fi

          case "$FOLDER" in
            envoy*) platforms=linux/amd64,linux/arm64;;
            etcd*) platforms=linux/amd64,linux/arm64;;
          esac

          trivyResults="${FOLDER//\//-}-trivy.sarif"

          {
            echo "image-name=$registry/$name:$tag"
            echo "platforms=$platforms"
            echo "trivy-results=$trivyResults"
          } | tee -- "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          show-progress: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ steps.image.outputs.platforms }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Quay
        if: startsWith(steps.image.outputs.image-name, 'quay.io/')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_PASSWORD }}
          registry: quay.io

      - name: Collect additional build contexts
        id: build-contexts
        env:
          FOLDER: ${{ matrix.folder }}
        run: |
          set -euo pipefail
          if [ -d images/"$FOLDER"/build-contexts ]; then
            for ctx in images/"$FOLDER"/build-contexts/*; do
              printf '%s=%s\n' "${ctx##*/}" "$ctx"
            done
          fi \
            | jq --slurp --raw-input --raw-output \
              'rtrimstr("\n") | split("\n") | "list=\(tojson)"' \
            | tee -- "$GITHUB_OUTPUT"

      - name: Build agent
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ format('images/{0}', matrix.folder) }}
          build-contexts: ${{ join(fromJSON(steps.build-contexts.outputs.list), '\n') }}
          platforms: ${{ steps.image.outputs.platforms }}
          push: true
          tags: ${{ steps.image.outputs.image-name }}

      - name: Run Trivy vulnerability
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.image.outputs.image-name }}
          ignore-unfixed: true
          format: sarif
          severity: CRITICAL,HIGH
          output: ${{ steps.image.outputs.trivy-results }}

      - name: Upload Trivy scan results
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.image.outputs.trivy-results }}
          path: ${{ steps.image.outputs.trivy-results }}

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name == 'push'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.image.outputs.trivy-results }}
